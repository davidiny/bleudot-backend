# version: 2
# jobs:
#   build:
#     docker:
#       - image: circleci/ruby:2.4.1
#       - image: circleci/python:3.6.4
#     steps:
#       - checkout
#       - run: echo "A first hello"


# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      #Download and cache dependencies
#       - restore_cache:
#           keys:
#             - v1-dependencies-{{ checksum "requirements.txt" }}
#             # fallback to using the latest cache if no exact match is found
#             - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m pip install virtualenv
            virtualenv venv -p python3
            . src/venv/bin/activate
            sudo pip install django

#       - save_cache:
#           paths:
#             - ./venv
#           key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: Running tests
          command: |
            . src/venv/bin/activate
            . python3 manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports
